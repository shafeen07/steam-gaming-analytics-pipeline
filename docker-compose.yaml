version: '3.8'

services:
  # PostgreSQL Database (your existing working setup)
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - steam-network

  # Airflow Init (your existing setup)
  airflow-init:
    image: apache/airflow:2.7.1-python3.9
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=FB0o_zt4e3Ziq3LdUUO7F2Z95cvFFx16hU8jTeR1ASM=
      - _AIRFLOW_DB_UPGRADE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin
    depends_on:
      - postgres
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
    command: version
    networks:
      - steam-network

  # Airflow Webserver (your existing setup)
  airflow-webserver:
    image: apache/airflow:2.7.1-python3.9
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=FB0o_zt4e3Ziq3LdUUO7F2Z95cvFFx16hU8jTeR1ASM=
    depends_on:
      - postgres
      - airflow-init
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
    ports:
      - "8080:8080"
    command: webserver
    networks:
      - steam-network

  # Airflow Scheduler (your existing setup)
  airflow-scheduler:
    image: apache/airflow:2.7.1-python3.9
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=FB0o_zt4e3Ziq3LdUUO7F2Z95cvFFx16hU8jTeR1ASM=
    depends_on:
      - postgres
      - airflow-init
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
    command: scheduler
    networks:
      - steam-network

  # ===============================
  # KAFKA ECOSYSTEM (EXISTING)
  # ===============================

  # Zookeeper - Kafka coordination service
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zk_data:/var/lib/zookeeper/data
      - zk_logs:/var/lib/zookeeper/log
    networks:
      - steam-network

  # Kafka Broker - Main message streaming service
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Internal and external listeners for proper networking
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9093,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9093,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      # Topic management
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      # Performance tuning for development
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 1
      KAFKA_LOG_FLUSH_INTERVAL_MS: 1000
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - steam-network
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server localhost:9092
      interval: 10s
      timeout: 5s
      retries: 5

  # Schema Registry - Data contract management
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9093'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_DEBUG: "true"
    ports:
      - "8081:8081"
    networks:
      - steam-network

  # Kafka UI - Web interface for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
      - schema-registry
    environment:
      KAFKA_CLUSTERS_0_NAME: steam-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: "true"
    ports:
      - "8090:8080"
    networks:
      - steam-network

  # Python Kafka Producer Service (existing)
  kafka-producer:
    build:
      context: ./kafka
      dockerfile: Dockerfile.producer
    container_name: kafka-producer
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      POSTGRES_HOST: postgres
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      STEAM_API_KEY: 14CB184234FCADEEC49969800212CF91
    volumes:
      - ./kafka:/app
      - ./data:/app/data
    working_dir: /app
    command: python dynamic_game_tracker.py
    restart: unless-stopped
    networks:
      - steam-network

  # Python Kafka Consumer Service (existing)
  kafka-consumer:
    build:
      context: ./kafka
      dockerfile: Dockerfile.consumer
    container_name: kafka-consumer
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      POSTGRES_HOST: postgres
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
    volumes:
      - ./kafka:/app
      - ./data:/app/data
    working_dir: /app
    command: tail -f /dev/null
    networks:
      - steam-network

  # ===============================
  # NEW: LLM SENTIMENT ANALYSIS SERVICE
  # ===============================

  # LLM Sentiment Analysis Consumer
  sentiment-processor:
    build:
      context: ./kafka
      dockerfile: Dockerfile.sentiment
    container_name: sentiment-processor
    depends_on:
      - postgres
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      LLM_BACKEND: local
      BATCH_SIZE: 10
      MAX_WORKERS: 1
    volumes:
      - ./kafka:/app
      - sentiment_models:/app/models
    working_dir: /app
    command: python database_sentiment_processor.py
    restart: unless-stopped
    networks:
      - steam-network
    # Resource limits for ML workload
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # ===============================
  # OPTIONAL: SENTIMENT ANALYTICS API
  # ===============================

  # FastAPI service for sentiment analytics endpoints
  sentiment-api:
    build:
      context: ./api
      dockerfile: Dockerfile.sentiment-api
    container_name: sentiment-api
    depends_on:
      - postgres
      - sentiment-processor
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
    ports:
      - "8000:8000"
    volumes:
      - ./api:/app
    working_dir: /app
    command: uvicorn sentiment_api:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - steam-network

# ===============================
# VOLUMES (DATA PERSISTENCE)
# ===============================
volumes:
  postgres_data:
    driver: local
  kafka_data:
    driver: local
  zk_data:
    driver: local
  zk_logs:
    driver: local
  sentiment_models:
    driver: local  # Cache for ML models

# ===============================
# NETWORKS (SERVICE COMMUNICATION)
# ===============================
networks:
  steam-network:
    driver: bridge
    name: steam-analytics-network